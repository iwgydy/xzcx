const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { NewMessage } = require('telegram/events');
const { Api } = require('telegram/tl');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const express = require('express');
const chalk = require('chalk');

const API_ID = 23491254; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API_ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const API_HASH = '5f21a8b3cd574ea9c96d1f1898932173'; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API_HASH ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const ADMIN_ID = 7520172820; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Telegram ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
const ADMIN_CODE = '0825658423zx';
const ADD_PHONE_CODE = '975699zx';

const clients = [];
const sessionsDir = path.join(__dirname, 'sessions');
if (!fs.existsSync(sessionsDir)) fs.mkdirSync(sessionsDir);

const usedAngpaoFilePath = path.join(__dirname, 'used_angpao.json');
const phoneListFilePath = path.join(__dirname, 'phone_list.json');
const scanGroupsFilePath = path.join(__dirname, 'scan_groups.json');
const groupCountFilePath = path.join(__dirname, 'group_count.json');

let botLogs = [];
let apiStats = { totalLinksSent: 0, successfulLinks: 0, failedLinks: 0, lastError: null, lastErrorTime: null };
let totalGroupsJoined = 0;
let scanGroups = {};

const app = express();
const port = 4240;

app.use(express.json());
app.use(express.static('public'));

// File Management Functions
function loadOrCreateGroupCountFile() {
  if (!fs.existsSync(groupCountFilePath)) {
    fs.writeFileSync(groupCountFilePath, JSON.stringify({ total: 0 }, null, 2));
    console.log(chalk.bgGreen.black.bold(' üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå group_count.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ '));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå group_count.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`, color: '#00ff00' });
  }
  const data = JSON.parse(fs.readFileSync(groupCountFilePath, 'utf8'));
  totalGroupsJoined = data.total || 0;
  return totalGroupsJoined;
}

function saveGroupCountFile() {
  fs.writeFileSync(groupCountFilePath, JSON.stringify({ total: totalGroupsJoined }, null, 2));
}

function loadOrCreateUsedAngpaoFile() {
  if (!fs.existsSync(usedAngpaoFilePath)) {
    fs.writeFileSync(usedAngpaoFilePath, JSON.stringify({}, null, 2));
    console.log(chalk.bgGreen.black.bold(' üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå used_angpao.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ '));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå used_angpao.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`, color: '#00ff00' });
  }
  return JSON.parse(fs.readFileSync(usedAngpaoFilePath, 'utf8'));
}

function saveToUsedAngpaoFile(data) {
  fs.writeFileSync(usedAngpaoFilePath, JSON.stringify(data, null, 2));
}

function loadOrCreatePhoneListFile() {
  if (!fs.existsSync(phoneListFilePath)) {
    fs.writeFileSync(phoneListFilePath, JSON.stringify([], null, 2));
    console.log(chalk.bgGreen.black.bold(' üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå phone_list.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤) '));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå phone_list.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)`, color: '#00ff00' });
  }
  let phoneList = JSON.parse(fs.readFileSync(phoneListFilePath, 'utf8'));
  const now = Date.now();
  phoneList = phoneList.filter(entry => {
    if (entry.expiresAt && entry.expiresAt < now) {
      console.log(chalk.bgRed.black.bold(` üóëÔ∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${entry.number} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üóëÔ∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${entry.number} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`, color: '#ff5555' });
      return false;
    }
    return true;
  });
  saveToPhoneListFile(phoneList);
  return phoneList;
}

function saveToPhoneListFile(data) {
  fs.writeFileSync(phoneListFilePath, JSON.stringify(data, null, 2));
}

function loadOrCreateScanGroupsFile() {
  if (!fs.existsSync(scanGroupsFilePath)) {
    fs.writeFileSync(scanGroupsFilePath, JSON.stringify({}, null, 2));
    console.log(chalk.bgGreen.black.bold(' üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scan_groups.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ '));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scan_groups.json ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`, color: '#00ff00' });
  }
  scanGroups = JSON.parse(fs.readFileSync(scanGroupsFilePath, 'utf8'));
  const now = Date.now();
  for (const chatId in scanGroups) {
    if (scanGroups[chatId].expiresAt < now) {
      delete scanGroups[chatId];
      console.log(chalk.bgYellow.black.bold(` ‚è∞ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚è∞ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`, color: '#ffff00' });
    }
  }
  saveToScanGroupsFile(scanGroups);
  return scanGroups;
}

function saveToScanGroupsFile(data) {
  fs.writeFileSync(scanGroupsFilePath, JSON.stringify(data, null, 2));
}

function calculatePhoneEarnings() {
  const usedAngpaoData = loadOrCreateUsedAngpaoFile();
  const earnings = {};
  for (const code in usedAngpaoData) {
    const entry = usedAngpaoData[code];
    if (entry && Array.isArray(entry.details)) {
      entry.details.forEach(detail => {
        if (detail && detail.mobile && detail.amount_baht) {
          const phone = detail.mobile;
          const amount = parseFloat(detail.amount_baht) || 0;
          earnings[phone] = (earnings[phone] || 0) + amount;
        }
      });
    }
  }
  return earnings;
}

async function reconnectClient(client, phone) {
  if (!client.connected) {
    console.log(chalk.bgYellow.black.bold(` ‚ö†Ô∏è ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡∏´‡∏•‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà... `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡∏´‡∏•‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà`, color: '#ffff00' });
    try {
      await client.connect();
      console.log(chalk.bgGreen.black.bold(` üåü ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, color: '#00ff00' });
    } catch (error) {
      console.log(chalk.bgRed.black.bold(` ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ${phone}: ${error.message} `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ${phone}: ${error.message}`, color: '#ff5555' });
    }
  }
}

// Telegram Commands
async function handleAdmin(event, client) {
  const message = event.message;
  const userId = Number(message.senderId?.value || 0);
  const args = message.text.split(' ').slice(1);
  const phoneNumber = args[0];
  const code = args[1];
  const name = args.slice(2).join(' ');

  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /admin ‡∏à‡∏≤‡∏Å ${userId}: ${message.text}`, color: '#00ffcc' });

  if (userId !== ADMIN_ID) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üöÄ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!' });
    return;
  }
  if (!phoneNumber || !code || !name) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡∏Ç‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏£‡∏´‡∏±‡∏™ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢ ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üå† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏£‡∏´‡∏±‡∏™ 8 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô /admin 0987654321 975699zx ‡∏ô‡∏≤‡∏¢‡πÅ‡∏î‡∏á' });
    return;
  }

  if (code !== ADD_PHONE_CODE) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ${code} ‡πÇ‡∏î‡∏¢ ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üåå ‡∏£‡∏´‡∏±‡∏™ 8 ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!' });
    return;
  }

  const phoneRegex = /^0\d{9}$/;
  if (!phoneRegex.test(phoneNumber)) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ${phoneNumber} ‡πÇ‡∏î‡∏¢ ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üåå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡∏ô‡∏∞‡∏Ñ‡∏∞!' });
    return;
  }

  const phoneList = loadOrCreatePhoneListFile();
  if (phoneList.some(entry => entry.number === phoneNumber)) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥ ${phoneNumber} ‡πÇ‡∏î‡∏¢ ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üåô ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞!' });
    return;
  }

  phoneList.push({ number: phoneNumber, name });
  saveToPhoneListFile(phoneList);
  console.log(chalk.bgMagenta.black.bold(` üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phoneNumber} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${userId} `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phoneNumber} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡πÇ‡∏î‡∏¢ ${userId}`, color: '#00ff00' });
  await client.sendMessage(message.chatId, { message: `üåü ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phoneNumber} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞!` });
}

async function handleScanAngpao(event, client) {
  const message = event.message;
  const userId = Number(message.senderId?.value || 0);
  const chatId = String(message.chatId?.value || '');

  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /scanangpao ‡∏à‡∏≤‡∏Å ${userId} ‡πÉ‡∏ô ${chatId}`, color: '#00ffcc' });

  if (userId !== ADMIN_ID) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ${userId}`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üöÄ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!' });
    return;
  }

  const chat = await client.getEntity(message.chatId);
  if (!chat.group && !chat.supergroup) {
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`, color: '#ff5555' });
    await client.sendMessage(message.chatId, { message: 'üåå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞!' });
    return;
  }

  loadOrCreateScanGroupsFile();
  const expiresAt = Date.now() + 7 * 24 * 60 * 60 * 1000;
  scanGroups[chatId] = { expiresAt };
  saveToScanGroupsFile(scanGroups);

  console.log(chalk.bgGreen.black.bold(` üåü ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡∏ñ‡∏∂‡∏á ${new Date(expiresAt).toLocaleString('th-TH')}`, color: '#00ff00' });
  await client.sendMessage(message.chatId, { message: '* ‡∏Ñ‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });
}

async function handleNewMessage(event, client) {
  const botIndex = clients.indexOf(client) + 1;
  const botLabel = `[‡∏ö‡∏≠‡∏ó‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà ${botIndex}]`;
  const message = event.message;
  if (!message || !message.chatId || !message.senderId) return;

  const chatId = String(message.chatId.value || '');
  const userId = Number(message.senderId.value || 0);
  const text = message.text || '';

  try {
    const chat = await client.getEntity(message.chatId);
    const chatType = chat.group || chat.supergroup ? 'group' : 'private';

    console.log(chalk.bgCyan.black.bold(` ${botLabel} üåå ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ${chatType} ${chatId} - ${userId}: ${text} `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üì© ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ${chatType} ${chatId} - ${userId}: ${text}`, color: '#00ffcc' });

    loadOrCreateScanGroupsFile();
    const now = Date.now();

    const inviteLinkRegex = /(?:https?:\/\/)?t\.me\/(?:joinchat\/|\+)?([a-zA-Z0-9_-]+)/i;
    const inviteMatch = text.match(inviteLinkRegex);

    if (inviteMatch) {
      const inviteCode = inviteMatch[1];
      console.log(chalk.bgYellow.black.bold(` ${botLabel} üå† ‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç: ${inviteMatch[0]} (Code: ${inviteCode})`));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üå† ‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç: ${inviteMatch[0]}`, color: '#ffff00' });

      try {
        const joinResult = await client.invoke(new Api.messages.ImportChatInvite({ hash: inviteCode }));
        const newChatId = String(joinResult.chats[0].id.value);

        totalGroupsJoined++;
        saveGroupCountFile();

        console.log(chalk.bgGreen.black.bold(` ${botLabel} üåü ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ${newChatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${totalGroupsJoined})`));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üåü ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ${newChatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${totalGroupsJoined})`, color: '#00ff00' });

        const expiresAt = Date.now() + 7 * 24 * 60 * 60 * 1000;
        scanGroups[newChatId] = { expiresAt };
        saveToScanGroupsFile(scanGroups);

        console.log(chalk.bgGreen.black.bold(` ${botLabel} üåü ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${newChatId} ‡∏ñ‡∏∂‡∏á ${new Date(expiresAt).toLocaleString('th-TH')}`));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üåü ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${newChatId} ‡∏ñ‡∏∂‡∏á ${new Date(expiresAt).toLocaleString('th-TH')}`, color: '#00ff00' });
      } catch (joinError) {
        console.log(chalk.bgRed.black.bold(` ${botLabel} ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°: ${joinError.message}`));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°: ${joinError.message}`, color: '#ff5555' });
      }
    }

    if (chatType === 'private' || (scanGroups[chatId] && scanGroups[chatId].expiresAt > now)) {
      const regex = /https:\/\/gift\.truemoney\.com\/campaign\/\?v=([a-zA-Z0-9]+)/;
      const matchResult = text.match(regex);

      if (!matchResult || !matchResult[0]) {
        console.log(chalk.bgRed.black.bold(` ${botLabel} ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå TrueMoney Gift ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text} `));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå TrueMoney Gift ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text}`, color: '#ff5555' });
        return;
      }

      const angpaoLink = matchResult[0];
      const angpaoCode = matchResult[1];

      try {
        const existingLinksResponse = await fetch('http://de01.uniplex.xyz:1636/api/data/telegram');
        const existingLinks = await existingLinksResponse.json();
        const isLinkExist = existingLinks.some(item => item.link === angpaoLink);

        if (isLinkExist) {
          console.log(chalk.bgYellow.black.bold(` ${botLabel} ‚ö†Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå ${angpaoLink} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `));
          botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå ${angpaoLink} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å`, color: '#ffff00' });
        } else {
          const saveResponse = await fetch('http://de01.uniplex.xyz:1636/api/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ link: angpaoLink, source: 'telegram' })
          });
          const saveData = await saveResponse.json();
          console.log(chalk.bgGreen.black.bold(` ${botLabel} üìú ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ${angpaoLink} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${JSON.stringify(saveData)} `));
          botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üìú ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ${angpaoLink} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, color: '#00ff00' });
        }
      } catch (saveError) {
        console.log(chalk.bgRed.black.bold(` ${botLabel} ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ${angpaoLink}: ${saveError.message} `));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ${angpaoLink}: ${saveError.message}`, color: '#ff5555' });
      }

      let usedAngpaoData = loadOrCreateUsedAngpaoFile();
      const phoneList = loadOrCreatePhoneListFile();

      console.log(chalk.bgCyan.black.bold(` ${botLabel} üåå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ã‡∏≠‡∏á ${angpaoCode} ‡∏à‡∏≤‡∏Å ${chatType} ${chatId} `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üåå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ã‡∏≠‡∏á ${angpaoCode} ‡∏à‡∏≤‡∏Å ${chatType === 'private' ? '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' : '‡∏Å‡∏•‡∏∏‡πà‡∏°'} ${chatId}`, color: '#00ffcc' });

      const specialPhone = '0825658423';
      const allPhones = [{ number: specialPhone, name: 'Special Account' }, ...phoneList];

      if (allPhones.length === 0) {
        console.log(chalk.bgRed.black.bold(` ${botLabel} ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ `));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ`, color: '#ff5555' });
        return;
      }

      console.log(chalk.bgYellow.black.bold(` ${botLabel} üìû ‡∏û‡∏ö ${allPhones.length} ‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©) `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üìû ‡∏û‡∏ö ${allPhones.length} ‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©)`, color: '#ffff00' });

      for (let i = 0; i < allPhones.length; i += 2) {
        const phonesToProcess = allPhones.slice(i, i + 2);
        const promises = phonesToProcess.map(async (entry, index) => {
          const paymentPhone = entry.number;
          const apiUrl = `https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/${angpaoCode}/${paymentPhone}`;

          console.log(chalk.bgCyan.black.bold(` ${botLabel} üåê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: ${apiUrl} `));
          botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üåê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: ${apiUrl}`, color: '#00ffcc' });

          apiStats.totalLinksSent++;

          try {
            const response = await axios.get(apiUrl, { timeout: 5000 });
            const responseData = response.data;

            console.log(chalk.bgYellow.black.bold(` ${botLabel} üì© ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response: ${JSON.stringify(responseData)} `));
            botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üì© ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response: ${JSON.stringify(responseData)}`, color: '#ffff00' });

            if (response.status === 200 && responseData.status.code === "SUCCESS") {
              apiStats.successfulLinks++;
              const amount = parseFloat(responseData.data.my_ticket?.amount_baht || responseData.data.voucher.amount_baht);
              const detail = {
                mobile: paymentPhone,
                update_date: Date.now(),
                amount_baht: amount.toFixed(2),
                full_name: responseData.data.owner_profile?.full_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
              };

              if (!usedAngpaoData[angpaoCode]) {
                usedAngpaoData[angpaoCode] = { details: [], chatId: chatId, usedAt: new Date().toISOString(), totalAmount: responseData.data.voucher.amount_baht };
              }

              const existingDetailIndex = usedAngpaoData[angpaoCode].details.findIndex(d => d.mobile === paymentPhone);
              if (existingDetailIndex !== -1) {
                const existingAmount = parseFloat(usedAngpaoData[angpaoCode].details[existingDetailIndex].amount_baht) || 0;
                usedAngpaoData[angpaoCode].details[existingDetailIndex].amount_baht = (existingAmount + amount).toFixed(2);
                usedAngpaoData[angpaoCode].details[existingDetailIndex].update_date = Date.now();
              } else {
                usedAngpaoData[angpaoCode].details.push(detail);
              }

              if (paymentPhone !== specialPhone) {
                saveToUsedAngpaoFile(usedAngpaoData);
              }

              console.log(
                chalk.bgGreen.black.bold(` ${botLabel} üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! `) +
                chalk.cyan(` ‡∏ã‡∏≠‡∏á: ${angpaoCode} `) +
                chalk.green(` ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount} ‡∏ö‡∏≤‡∏ó `) +
                chalk.magenta(` ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${paymentPhone} `) +
                chalk.yellow(` [‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ${i + index + 1}] `) +
                chalk.gray(`[${new Date().toLocaleTimeString()}]`)
              );
              botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${angpaoCode} -> ${paymentPhone} ${amount} ‡∏ö‡∏≤‡∏ó [‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ${i + index + 1}]`, color: '#00ff00' });
            } else {
              apiStats.failedLinks++;
              console.log(
                chalk.bgRed.black.bold(` ${botLabel} ‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `) +
                chalk.cyan(` ‡∏ã‡∏≠‡∏á: ${angpaoCode} `) +
                chalk.magenta(` ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${paymentPhone} `) +
                chalk.red(` ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${responseData.status.code} `) +
                chalk.gray(`[${new Date().toLocaleTimeString()}]`)
              );
              botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${angpaoCode} -> ${paymentPhone}: ${responseData.status.code}`, color: '#ff5555' });
            }
          } catch (error) {
            apiStats.failedLinks++;
            apiStats.lastError = error.message;
            apiStats.lastErrorTime = new Date().toISOString();
            console.log(
              chalk.bgRed.black.bold(` ${botLabel} ‚ö†Ô∏è ‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß `) +
              chalk.cyan(` ‡∏ã‡∏≠‡∏á: ${angpaoCode} `) +
              chalk.magenta(` ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${paymentPhone} `) +
              chalk.red(` ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${error.message} `) +
              chalk.gray(`[${new Date().toLocaleTimeString()}]`)
            );
            botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è ‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${angpaoCode} -> ${paymentPhone}: ${error.message}`, color: '#ff5555' });
          }
        });

        await Promise.all(promises);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } else {
      console.log(chalk.bgYellow.black.bold(` ${botLabel} ‚ö†Ô∏è ‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ö†Ô∏è ‡∏Å‡∏•‡∏∏‡πà‡∏° ${chatId} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`, color: '#ff5555' });
    }
  } catch (error) {
    console.log(chalk.bgRed.black.bold(` ${botLabel} ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleNewMessage: ${error.message} `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ${botLabel} ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleNewMessage: ${error.message}`, color: '#ff5555' });
    await reconnectClient(client, client.phone);
  }
}

// Web API Endpoints
app.get('/api/phone-details', (req, res) => {
  const usedAngpaoData = loadOrCreateUsedAngpaoFile();
  const phoneList = loadOrCreatePhoneListFile();
  const specialPhone = '0825658423';
  const details = {};
  for (const code in usedAngpaoData) {
    const entry = usedAngpaoData[code];
    if (entry && Array.isArray(entry.details)) {
      entry.details.forEach(detail => {
        if (detail && detail.mobile && detail.mobile !== specialPhone) {
          const phone = detail.mobile;
          const phoneEntry = phoneList.find(p => p.number === phone);
          if (!details[phone]) details[phone] = [];
          details[phone].push({
            rank: phoneList.findIndex(p => p.number === phone) + 1,
            angpaoCode: code,
            mobile: detail.mobile,
            update_date: detail.update_date,
            amount_baht: detail.amount_baht || "0.00",
            totalAmount: entry.totalAmount || "0.00",
            name: phoneEntry ? phoneEntry.name : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
          });
        }
      });
    }
  }
  res.json(details);
});

app.get('/api/phones', (req, res) => {
  const phoneList = loadOrCreatePhoneListFile();
  const earnings = calculatePhoneEarnings();
  const specialPhone = '0825658423';
  const phoneData = phoneList
    .filter(entry => entry.number !== specialPhone)
    .map((entry, index) => ({
      rank: index + 1,
      number: entry.number,
      name: entry.name,
      earnings: earnings[entry.number] || 0,
      expiresAt: entry.expiresAt || null
    }));
  res.json(phoneData);
});

app.post('/api/add-phone', (req, res) => {
  const { phone, code, name, expiresAt } = req.body;
  const phoneRegex = /^0\d{9}$/;

  if (!phone || !code || !name || !expiresAt) return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏£‡∏´‡∏±‡∏™ 8 ‡∏´‡∏•‡∏±‡∏Å ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
  if (code !== ADD_PHONE_CODE) return res.status(400).json({ error: '‡∏£‡∏´‡∏±‡∏™ 8 ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  if (!phoneRegex.test(phone)) return res.status(400).json({ error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0' });

  const expiresTimestamp = new Date(expiresAt).getTime();
  if (isNaN(expiresTimestamp) || expiresTimestamp <= Date.now()) return res.status(400).json({ error: '‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß' });

  const phoneList = loadOrCreatePhoneListFile();
  if (phoneList.some(entry => entry.number === phone)) return res.status(400).json({ error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' });

  phoneList.push({ number: phone, name, expiresAt: expiresTimestamp });
  saveToPhoneListFile(phoneList);
  res.json({ message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${new Date(expiresTimestamp).toLocaleString('th-TH')} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
  console.log(chalk.bgMagenta.black.bold(` üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${new Date(expiresTimestamp).toLocaleString('th-TH')} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ä‡∏∑‡πà‡∏≠ ${name} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${new Date(expiresTimestamp).toLocaleString('th-TH')} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö`, color: '#00ff00' });
});

app.delete('/api/delete-phone', (req, res) => {
  const { phone } = req.body;
  let phoneList = loadOrCreatePhoneListFile();
  const initialLength = phoneList.length;
  phoneList = phoneList.filter(entry => entry.number !== phone);
  if (phoneList.length === initialLength) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  saveToPhoneListFile(phoneList);
  res.json({ message: `‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
  console.log(chalk.bgRed.black.bold(` üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö`, color: '#ff5555' });
});

app.put('/api/edit-phone-name', (req, res) => {
  const { phone, name } = req.body;
  const phoneList = loadOrCreatePhoneListFile();
  const phoneEntry = phoneList.find(entry => entry.number === phone);
  if (!phoneEntry) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  phoneEntry.name = name;
  saveToPhoneListFile(phoneList);
  res.json({ message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á ${phone} ‡πÄ‡∏õ‡πá‡∏ô ${name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
  console.log(chalk.bgYellow.black.bold(` ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ ${phone} ‡πÄ‡∏õ‡πá‡∏ô ${name} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ ${phone} ‡πÄ‡∏õ‡πá‡∏ô ${name} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö`, color: '#ffff00' });
});

app.delete('/api/delete-bot', async (req, res) => {
  const { phone } = req.body;
  const clientIndex = clients.findIndex(c => c.phone === phone);
  if (clientIndex === -1) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });

  const client = clients[clientIndex];
  const sessionFile = path.join(sessionsDir, `${phone}.txt`);

  try {
    if (client.connected) await client.disconnect();
    if (fs.existsSync(sessionFile)) fs.unlinkSync(sessionFile);
    clients.splice(clientIndex, 1);
    res.json({ message: `‡∏•‡∏ö bot ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
    console.log(chalk.bgRed.black.bold(` üóëÔ∏è ‡∏•‡∏ö bot ${phone} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üóëÔ∏è ‡∏•‡∏ö bot ${phone} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö`, color: '#ff5555' });
  } catch (error) {
    res.status(500).json({ error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö bot: ${error.message}` });
    console.log(chalk.bgRed.black.bold(` ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö bot ${phone}: ${error.message} `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö bot ${phone}: ${error.message}`, color: '#ff5555' });
  }
});

app.get('/api/logs', (req, res) => {
  res.json({ logs: botLogs.slice(-50), apiStats, totalGroupsJoined });
});

app.get('/api/accounts', (req, res) => {
  const accounts = clients.map((client, index) => ({
    id: index,
    phone: client.phone || 'Unknown',
    status: client.connected ? 'Connected' : 'Disconnected'
  }));
  res.json(accounts);
});

app.post('/api/send-code', async (req, res) => {
  const { phone } = req.body;
  const phoneRegex = /^\+\d{10,12}$/;

  console.log(chalk.bgYellow.black.bold(`[DEBUG] Received phone: ${phone}`));
  if (!phone || !phoneRegex.test(phone)) {
    console.log(chalk.bgRed.black.bold(`[DEBUG] Invalid phone format: ${phone}`));
    return res.status(400).json({ error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏Å‡∏• ‡πÄ‡∏ä‡πà‡∏ô +66971432317' });
  }

  const sessionFile = path.join(sessionsDir, `${phone}.txt`);
  let sessionString = fs.existsSync(sessionFile) ? fs.readFileSync(sessionFile, 'utf8') : '';
  const session = new StringSession(sessionString);
  const client = new TelegramClient(session, API_ID, API_HASH, { connectionRetries: 20, timeout: 120000, retryDelay: 5000 });
  client.phone = phone;

  try {
    console.log(chalk.bgCyan.black.bold(`[DEBUG] Connecting to Telegram for ${phone}...`));
    await client.connect();
    if (await client.isUserAuthorized()) {
      if (!clients.some(c => c.phone === phone)) {
        clients.push(client);
        setupClientEvents(client);
      }
      console.log(chalk.bgGreen.black.bold(`[DEBUG] ${phone} already authorized`));
      return res.json({ message: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏°‡∏µ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)` });
    }

    console.log(chalk.bgYellow.black.bold(`[DEBUG] Sending verification code to ${phone}...`));
    const sendCodeResult = await client.invoke(new Api.auth.SendCode({
      phoneNumber: phone,
      apiId: API_ID,
      apiHash: API_HASH,
      settings: new Api.CodeSettings({})
    }));

    client.phoneCodeHash = sendCodeResult.phoneCodeHash;
    if (!clients.some(c => c.phone === phone)) clients.push(client);
    console.log(chalk.bgGreen.black.bold(`[DEBUG] Code sent to ${phone}`));
    res.json({ message: `‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${phone} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, phone });
  } catch (error) {
    console.error(chalk.bgRed.black.bold(`[DEBUG] Error in /api/send-code for ${phone}: ${error.message}`));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /api/send-code: ${error.message}`, color: '#ff5555' });
    res.status(500).json({ error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}` });
  }
});

app.post('/api/verify-code', async (req, res) => {
  const { phone, code, password } = req.body;
  const client = clients.find(c => c.phone === phone && c.phoneCodeHash);
  if (!client) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà' });

  try {
    await client.invoke(new Api.auth.SignIn({ phoneNumber: phone, phoneCodeHash: client.phoneCodeHash, phoneCode: code }));
  } catch (err) {
    if (err.errorMessage === 'SESSION_PASSWORD_NEEDED') {
      if (!password) return res.status(401).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 2FA', requiresPassword: true });
      try {
        await client.invoke(new Api.auth.CheckPassword({ password }));
      } catch (passwordErr) {
        return res.status(401).json({ error: `‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${passwordErr.message}` });
      }
    } else {
      return res.status(400).json({ error: `‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${err.message}` });
    }
  }

  fs.writeFileSync(path.join(sessionsDir, `${phone}.txt`), client.session.save());
  setupClientEvents(client);
  console.log(chalk.bgGreen.black.bold(` üåü ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `));
  botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, color: '#00ff00' });
  res.json({ message: `‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
});

// Routes for serving HTML pages
app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
app.get('/phones', (req, res) => res.sendFile(path.join(__dirname, 'public', 'phones.html')));
app.get('/details', (req, res) => res.sendFile(path.join(__dirname, 'public', 'details.html')));
app.get('/logs', (req, res) => res.sendFile(path.join(__dirname, 'public', 'logs.html')));
app.get('/admin-login', (req, res) => res.sendFile(path.join(__dirname, 'public', 'admin-login.html')));

app.get('/admin', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="th">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>üõ†Ô∏è ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</title>
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@400;700&display=swap');
        body {
          font-family: 'Prompt', sans-serif;
          background: #000000;
          color: #00ffcc;
          padding: 20px;
          margin: 0;
          overflow-x: hidden;
          position: relative;
          font-size: 14px;
        }
        .stars {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: url('https://www.transparenttextures.com/patterns/stardust.png') repeat;
          opacity: 0.8;
          z-index: -1;
          animation: twinkle 3s infinite;
        }
        @keyframes twinkle {
          0%, 100% { opacity: 0.6; }
          50% { opacity: 1; }
        }
        nav {
          background: rgba(10, 10, 35, 0.9);
          padding: 10px;
          border-radius: 8px;
          box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
          display: flex;
          justify-content: center;
          gap: 10px;
          margin-bottom: 15px;
        }
        nav a {
          color: #00ffcc;
          text-decoration: none;
          font-weight: bold;
          padding: 5px 10px;
          border-radius: 4px;
          transition: all 0.3s;
        }
        nav a:hover {
          background: rgba(0, 255, 204, 0.2);
          text-shadow: 0 0 10px #00ffcc;
        }
        h1, h2 {
          text-align: center;
          font-size: 1.8em;
          text-shadow: 0 0 10px #00ffcc, 0 0 20px #ff00ff;
          animation: glow 1.5s infinite alternate;
          margin: 10px 0;
        }
        @keyframes glow {
          from { text-shadow: 0 0 5px #00ffcc; }
          to { text-shadow: 0 0 15px #00ffcc, 0 0 25px #ff00ff; }
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 15px;
          background: rgba(10, 10, 35, 0.9);
          box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
          border-radius: 8px;
          overflow: hidden;
        }
        th, td {
          padding: 10px;
          text-align: left;
          border-bottom: 1px solid #333366;
        }
        th {
          background: linear-gradient(90deg, #00ffcc, #ff00ff);
          color: #000;
          font-weight: bold;
          text-transform: uppercase;
        }
        td {
          color: #fff;
          transition: background 0.3s;
        }
        tr:hover {
          background: rgba(0, 255, 204, 0.2);
        }
        .form {
          margin-top: 15px;
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 10px;
          max-width: 300px;
          margin-left: auto;
          margin-right: auto;
        }
        input {
          padding: 8px;
          border: 2px solid #00ffcc;
          background: rgba(10, 10, 35, 0.8);
          color: #fff;
          border-radius: 6px;
          outline: none;
          transition: all 0.3s;
          width: 100%;
          box-sizing: border-box;
        }
        input:focus {
          border-color: #ff00ff;
          box-shadow: 0 0 10px #ff00ff;
        }
        button {
          padding: 8px 15px;
          background: linear-gradient(90deg, #00ffcc, #ff00ff);
          border: none;
          border-radius: 6px;
          color: #000;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s;
          width: 100%;
        }
        button:hover {
          transform: scale(1.05);
          box-shadow: 0 0 15px rgba(255, 0, 255, 0.7);
        }
        .edit-input {
          width: 80px;
          padding: 4px;
          margin-right: 5px;
        }
        .delete-btn {
          background: #ff5555;
          padding: 5px 10px;
          width: auto;
        }
        .delete-btn:hover {
          background: #ff7777;
          transform: scale(1.1);
        }
        #status {
          margin-top: 10px;
          text-align: center;
          color: #ff5555;
        }
      </style>
    </head>
    <body>
      <div class="stars"></div>
      <nav>
        <a href="/">üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
        <a href="/phones">üì± ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß</a>
        <a href="/details">üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏á‡∏¥‡∏ô</a>
        <a href="/logs">üìú ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏ß‡∏Å‡∏≤‡∏®</a>
        <a href="/admin">üõ†Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</a>
      </nav>
      <h1>üõ†Ô∏è ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</h1>
      <h2>ü§ñ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram</h2>
      <table id="accountsTable">
        <thead>
          <tr>
            <th>ID</th>
            <th>üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</th>
            <th>üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>üóëÔ∏è ‡∏•‡∏ö</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="form">
        <input type="text" id="phoneInput" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÄ‡∏ä‡πà‡∏ô +66971432317)">
        <button id="sendCodeBtn" onclick="sendCode()">‚ú® ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
        <input type="text" id="codeInput" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö">
        <input type="password" id="passwordInput" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 2FA (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" style="display: none;">
        <button id="verifyCodeBtn" onclick="verifyCode()">‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</button>
      </div>
      <h2>üì± ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß</h2>
      <table id="phonesTable">
        <thead>
          <tr>
            <th>‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
            <th>üå† ‡πÄ‡∏ö‡∏≠‡∏£‡πå</th>
            <th>üë§ ‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</th>
            <th>üìÖ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
            <th>üóëÔ∏è ‡∏•‡∏ö</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div id="status"></div>

      <script>
        console.log('[DEBUG] Admin page script loaded');

        function debugLog(message, color = '#00ffcc') {
          console.log('[DEBUG] ' + message);
          const statusDiv = document.getElementById('status');
          statusDiv.textContent = message;
          statusDiv.style.color = color;
        }

        async function fetchAccounts() {
          try {
            const response = await fetch('/api/accounts');
            if (!response.ok) throw new Error('Failed to fetch accounts');
            const accounts = await response.json();
            const tbody = document.querySelector('#accountsTable tbody');
            tbody.innerHTML = '';
            if (accounts.length === 0) {
              tbody.innerHTML = '<tr><td colspan="4" style="text-align: center;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</td></tr>';
            } else {
              accounts.forEach(account => {
                const tr = document.createElement('tr');
                tr.innerHTML = [
                  '<td>' + account.id + '</td>',
                  '<td>üìû ' + account.phone + '</td>',
                  '<td>üì° ' + account.status + '</td>',
                  '<td><button class="delete-btn" onclick="deleteBot(\\'' + account.phone + '\\')">üóëÔ∏è ‡∏•‡∏ö</button></td>'
                ].join('');
                tbody.appendChild(tr);
              });
            }
          } catch (error) {
            console.error('Error fetching accounts:', error);
            debugLog('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ: ' + error.message, '#ff5555');
          }
        }

        async function fetchPhones() {
          try {
            const response = await fetch('/api/phones');
            if (!response.ok) throw new Error('Failed to fetch phones');
            const phones = await response.json();
            const tbody = document.querySelector('#phonesTable tbody');
            tbody.innerHTML = '';
            if (phones.length === 0) {
              tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</td></tr>';
            } else {
              phones.forEach(phone => {
                const tr = document.createElement('tr');
                tr.innerHTML = [
                  '<td>' + phone.rank + '</td>',
                  '<td>üå† ' + phone.number + '</td>',
                  '<td><input type="text" class="edit-input" value="' + phone.name + '" onchange="editName(\\'' + phone.number + '\\', this.value)"></td>',
                  '<td>' + phone.earnings.toFixed(2) + '</td>',
                  '<td>üìÖ ' + (phone.expiresAt ? new Date(phone.expiresAt).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') + '</td>',
                  '<td><button class="delete-btn" onclick="deletePhone(\\'' + phone.number + '\\')">üóëÔ∏è ‡∏•‡∏ö</button></td>'
                ].join('');
                tbody.appendChild(tr);
              });
            }
          } catch (error) {
            console.error('Error fetching phones:', error);
            debugLog('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ' + error.message, '#ff5555');
          }
        }

        async function sendCode() {
          console.log('[DEBUG] Send code button clicked');
          const phone = document.getElementById('phoneInput').value.trim();
          if (!phone) {
            debugLog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£!', '#ff5555');
            return;
          }
          console.log('[DEBUG] Phone entered:', phone);
          try {
            const response = await fetch('/api/send-code', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ phone })
            });
            const result = await response.json();
            if (response.ok) {
              debugLog(result.message, '#00ff00');
            } else {
              debugLog(result.error, '#ff5555');
            }
          } catch (error) {
            debugLog('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message, '#ff5555');
            console.error('Error in sendCode:', error);
          }
        }

        async function verifyCode() {
          console.log('[DEBUG] Verify code button clicked');
          const phone = document.getElementById('phoneInput').value.trim();
          const code = document.getElementById('codeInput').value.trim();
          const password = document.getElementById('passwordInput').value.trim();

          if (!phone || !code) {
            debugLog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô!', '#ff5555');
            return;
          }

          try {
            const response = await fetch('/api/verify-code', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ phone, code, password })
            });
            const result = await response.json();
            if (response.ok) {
              debugLog(result.message, '#00ff00');
              document.getElementById('phoneInput').value = '';
              document.getElementById('codeInput').value = '';
              document.getElementById('passwordInput').value = '';
              document.getElementById('passwordInput').style.display = 'none';
              fetchAccounts();
            } else {
              debugLog(result.error, '#ff5555');
              if (result.requiresPassword) {
                document.getElementById('passwordInput').style.display = 'block';
                debugLog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 2FA!', '#ff5555');
              }
            }
          } catch (error) {
            debugLog('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message, '#ff5555');
            console.error('Error in verifyCode:', error);
          }
        }

        async function deletePhone(phone) {
          if (!confirm('‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ' + phone + '?')) return;
          try {
            const response = await fetch('/api/delete-phone', {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ phone })
            });
            const result = await response.json();
            if (response.ok) {
              debugLog(result.message, '#00ff00');
              fetchPhones();
            } else {
              debugLog(result.error, '#ff5555');
            }
          } catch (error) {
            debugLog('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, '#ff5555');
          }
        }

        async function editName(phone, name) {
          try {
            const response = await fetch('/api/edit-phone-name', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ phone, name })
            });
            const result = await response.json();
            if (response.ok) {
              debugLog(result.message, '#00ff00');
              fetchPhones();
            } else {
              debugLog(result.error, '#ff5555');
            }
          } catch (error) {
            debugLog('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, '#ff5555');
          }
        }

        async function deleteBot(phone) {
          if (!confirm('‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö bot ' + phone + '?')) return;
          try {
            const response = await fetch('/api/delete-bot', {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ phone })
            });
            const result = await response.json();
            if (response.ok) {
              debugLog(result.message, '#00ff00');
              fetchAccounts();
            } else {
              debugLog(result.error, '#ff5555');
            }
          } catch (error) {
            debugLog('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, '#ff5555');
          }
        }

        fetchAccounts();
        fetchPhones();
        setInterval(fetchAccounts, 5000);
        setInterval(fetchPhones, 5000);
      </script>
    </body>
    </html>
  `);
});

// Setup Telegram Client Events
function setupClientEvents(client) {
  client.addEventHandler(async (event) => {
    const messageText = event.message.text;

    switch (true) {
      case messageText.startsWith('/admin'): await handleAdmin(event, client); break;
      case messageText.startsWith('/scanangpao'): await handleScanAngpao(event, client); break;
      default: await handleNewMessage(event, client); break;
    }
  }, new NewMessage({}));
}

async function loadExistingSessions() {
  const files = fs.readdirSync(sessionsDir).filter(file => file.endsWith('.txt'));
  for (const file of files) {
    const phone = path.basename(file, '.txt');
    const sessionString = fs.readFileSync(path.join(sessionsDir, file), 'utf8');
    const session = new StringSession(sessionString);
    const client = new TelegramClient(session, API_ID, API_HASH, { connectionRetries: 20, timeout: 120000, retryDelay: 5000 });
    client.phone = phone;
    try {
      console.log(chalk.bgCyan.black.bold(` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${phone}... `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${phone}`, color: '#00ffcc' });
      await client.connect();
      if (await client.isUserAuthorized()) {
        clients.push(client);
        setupClientEvents(client);
        console.log(chalk.bgGreen.black.bold(` üåü ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üåü ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, color: '#00ff00' });
      } else {
        console.log(chalk.bgRed.black.bold(` ‚ùå ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å `));
        botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ùå ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å`, color: '#ff5555' });
        fs.unlinkSync(path.join(sessionsDir, file));
      }
    } catch (error) {
      console.log(chalk.bgRed.black.bold(` ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone}: ${error.message} `));
      botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${phone}: ${error.message}`, color: '#ff5555' });
    }
  }
}

// Start Server
(async () => {
  await loadExistingSessions();
  loadOrCreateGroupCountFile();

  setInterval(() => {
    loadOrCreatePhoneListFile();
    console.log(chalk.bgCyan.black.bold(` ‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] ‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, color: '#00ffcc' });
  }, 60000);

  app.listen(port, () => {
    console.log(chalk.bgMagenta.black.bold(` üöÄ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port} `));
    botLogs.push({ text: `[${new Date().toLocaleTimeString()}] üöÄ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port}`, color: '#ff00ff' });
  });
})();